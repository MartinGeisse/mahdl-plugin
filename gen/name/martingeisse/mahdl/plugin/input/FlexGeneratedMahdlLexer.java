/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package name.martingeisse.mahdl.plugin.input;

import java.lang.Error;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>mahdl.flex</tt>
 */
public class FlexGeneratedMahdlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\4\1\0\1\1\1\4\22\0\1\1\1\33\3\0\1\32\1\23\1\0\1\7\1\10\1\3\1\30"+
    "\1\20\1\31\1\15\1\2\1\6\1\62\6\63\2\5\1\16\1\17\1\26\1\21\1\27\1\34\1\0\6"+
    "\64\24\65\1\11\1\0\1\12\1\25\1\35\1\0\1\51\1\55\1\52\1\40\1\43\1\50\1\54\1"+
    "\61\1\44\2\65\1\42\1\36\1\45\1\37\2\65\1\47\1\53\1\46\1\41\1\56\1\60\1\57"+
    "\2\65\1\13\1\24\1\14\1\22\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\1\1\32\1\33\14\34\1\35\1\36"+
    "\4\0\1\37\1\40\1\41\1\42\1\43\1\44\3\34"+
    "\1\45\2\34\1\46\1\47\10\34\1\36\4\50\2\34"+
    "\1\51\11\34\1\52\1\34\1\36\3\34\1\53\1\34"+
    "\1\54\2\34\1\55\15\34\1\56\1\57\5\34\1\60"+
    "\1\61\1\62\1\63\1\34\1\64\3\34\1\65\1\66"+
    "\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\66\0\154\0\66\0\242\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\330\0\66\0\66\0\66\0\66\0\u010e\0\u0144"+
    "\0\66\0\66\0\66\0\u017a\0\66\0\u01b0\0\u01e6\0\u021c"+
    "\0\u0252\0\u01b0\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396"+
    "\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546"+
    "\0\66\0\66\0\66\0\66\0\66\0\66\0\u057c\0\u05b2"+
    "\0\u05e8\0\u01b0\0\u061e\0\u0654\0\u068a\0\u01b0\0\u06c0\0\u06f6"+
    "\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u04a4"+
    "\0\u04da\0\u0510\0\u0546\0\u08a6\0\u08dc\0\u01b0\0\u0912\0\u0948"+
    "\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u01b0"+
    "\0\u0af8\0\66\0\u0b2e\0\u0b64\0\u0b9a\0\u01b0\0\u0bd0\0\u01b0"+
    "\0\u0c06\0\u0c3c\0\u01b0\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a"+
    "\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa"+
    "\0\u01b0\0\u01b0\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u01b0"+
    "\0\u01b0\0\u01b0\0\u01b0\0\u103e\0\u01b0\0\u1074\0\u10aa\0\u10e0"+
    "\0\u01b0\0\u01b0\0\u01b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\2\42\1\43\1\44\1\42\1\45\1\46\2\42"+
    "\1\47\1\50\1\42\1\51\1\52\3\42\2\6\2\42"+
    "\70\0\1\53\1\54\67\0\2\6\30\0\1\55\1\56"+
    "\14\0\1\57\3\0\1\60\2\6\23\0\1\61\65\0"+
    "\1\62\4\0\1\63\60\0\1\64\5\0\1\65\57\0"+
    "\1\66\51\0\2\42\26\0\31\42\5\0\2\42\26\0"+
    "\2\42\1\67\11\42\1\70\14\42\5\0\2\42\26\0"+
    "\4\42\1\71\24\42\5\0\2\42\26\0\2\42\1\72"+
    "\3\42\1\73\22\42\5\0\2\42\26\0\5\42\1\74"+
    "\23\42\5\0\2\42\26\0\10\42\1\75\2\42\1\76"+
    "\15\42\5\0\2\42\26\0\6\42\1\77\22\42\5\0"+
    "\2\42\26\0\6\42\1\100\22\42\5\0\2\42\26\0"+
    "\2\42\1\101\11\42\1\102\14\42\5\0\2\42\26\0"+
    "\7\42\1\103\13\42\1\104\5\42\5\0\2\42\26\0"+
    "\7\42\1\105\21\42\5\0\2\42\26\0\6\42\1\106"+
    "\22\42\4\53\1\0\61\53\3\54\1\107\62\54\6\0"+
    "\1\110\53\0\2\110\7\0\2\111\53\0\2\111\10\0"+
    "\1\112\53\0\1\112\10\0\2\113\31\0\1\113\2\0"+
    "\1\113\4\0\3\113\2\0\1\113\4\0\3\113\6\0"+
    "\2\42\26\0\3\42\1\114\25\42\5\0\2\42\26\0"+
    "\11\42\1\115\17\42\5\0\2\42\26\0\11\42\1\116"+
    "\17\42\5\0\2\42\26\0\13\42\1\117\15\42\5\0"+
    "\2\42\26\0\16\42\1\120\12\42\5\0\2\42\26\0"+
    "\11\42\1\121\17\42\5\0\2\42\26\0\22\42\1\122"+
    "\6\42\5\0\2\42\26\0\17\42\1\123\11\42\5\0"+
    "\2\42\26\0\10\42\1\124\20\42\5\0\2\42\26\0"+
    "\16\42\1\125\12\42\5\0\2\42\26\0\17\42\1\126"+
    "\11\42\5\0\2\42\26\0\7\42\1\127\21\42\5\0"+
    "\2\42\26\0\11\42\1\130\17\42\5\0\2\42\26\0"+
    "\15\42\1\131\13\42\2\54\1\132\1\107\62\54\5\0"+
    "\2\42\26\0\4\42\1\133\24\42\5\0\2\42\26\0"+
    "\12\42\1\134\16\42\5\0\2\42\26\0\14\42\1\135"+
    "\14\42\5\0\2\42\26\0\6\42\1\136\22\42\5\0"+
    "\2\42\26\0\6\42\1\137\22\42\5\0\2\42\26\0"+
    "\11\42\1\140\17\42\5\0\2\42\26\0\7\42\1\141"+
    "\21\42\5\0\2\42\26\0\16\42\1\142\12\42\5\0"+
    "\2\42\26\0\6\42\1\143\22\42\5\0\2\42\26\0"+
    "\10\42\1\144\20\42\5\0\2\42\26\0\11\42\1\145"+
    "\17\42\5\0\2\42\26\0\11\42\1\146\17\42\5\0"+
    "\2\42\26\0\5\42\1\147\23\42\5\0\2\42\26\0"+
    "\7\42\1\150\21\42\5\0\2\42\26\0\4\42\1\151"+
    "\24\42\5\0\2\42\26\0\12\42\1\152\4\42\1\153"+
    "\11\42\5\0\2\42\26\0\16\42\1\154\12\42\5\0"+
    "\2\42\26\0\11\42\1\155\17\42\5\0\2\42\26\0"+
    "\14\42\1\156\14\42\5\0\2\42\26\0\15\42\1\157"+
    "\13\42\5\0\2\42\26\0\2\42\1\160\26\42\5\0"+
    "\2\42\26\0\6\42\1\161\22\42\5\0\2\42\26\0"+
    "\22\42\1\162\6\42\5\0\2\42\26\0\5\42\1\163"+
    "\23\42\5\0\2\42\26\0\13\42\1\164\15\42\5\0"+
    "\2\42\26\0\6\42\1\165\22\42\5\0\2\42\26\0"+
    "\11\42\1\166\17\42\5\0\2\42\26\0\14\42\1\167"+
    "\14\42\5\0\2\42\26\0\5\42\1\170\23\42\5\0"+
    "\2\42\26\0\24\42\1\171\4\42\5\0\2\42\26\0"+
    "\12\42\1\172\16\42\5\0\2\42\26\0\11\42\1\173"+
    "\17\42\5\0\2\42\26\0\14\42\1\174\14\42\5\0"+
    "\2\42\26\0\12\42\1\175\16\42\5\0\2\42\26\0"+
    "\6\42\1\176\22\42\5\0\2\42\26\0\10\42\1\177"+
    "\20\42\5\0\2\42\26\0\15\42\1\200\13\42\5\0"+
    "\2\42\26\0\12\42\1\201\16\42\5\0\2\42\26\0"+
    "\11\42\1\202\17\42\5\0\2\42\26\0\6\42\1\203"+
    "\22\42";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4374];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\1\1\13\11\1\1\4\11"+
    "\2\1\3\11\1\1\1\11\17\1\4\0\6\11\43\1"+
    "\1\11\51\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FlexGeneratedMahdlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 56: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            }
          case 57: break;
          case 3: 
            { return Symbols.OP_DIVIDED_BY;
            }
          case 58: break;
          case 4: 
            { return Symbols.OP_TIMES;
            }
          case 59: break;
          case 5: 
            { return Symbols.INTEGER_LITERAL;
            }
          case 60: break;
          case 6: 
            { return Symbols.OPENING_PARENTHESIS;
            }
          case 61: break;
          case 7: 
            { return Symbols.CLOSING_PARENTHESIS;
            }
          case 62: break;
          case 8: 
            { return Symbols.OPENING_SQUARE_BRACKET;
            }
          case 63: break;
          case 9: 
            { return Symbols.CLOSING_SQUARE_BRACKET;
            }
          case 64: break;
          case 10: 
            { return Symbols.OPENING_CURLY_BRACE;
            }
          case 65: break;
          case 11: 
            { return Symbols.CLOSING_CURLY_BRACE;
            }
          case 66: break;
          case 12: 
            { return Symbols.DOT;
            }
          case 67: break;
          case 13: 
            { return Symbols.COLON;
            }
          case 68: break;
          case 14: 
            { return Symbols.SEMICOLON;
            }
          case 69: break;
          case 15: 
            { return Symbols.COMMA;
            }
          case 70: break;
          case 16: 
            { return Symbols.EQUALS;
            }
          case 71: break;
          case 17: 
            { return Symbols.OP_NOT;
            }
          case 72: break;
          case 18: 
            { return Symbols.OP_AND;
            }
          case 73: break;
          case 19: 
            { return Symbols.OP_OR;
            }
          case 74: break;
          case 20: 
            { return Symbols.OP_XOR;
            }
          case 75: break;
          case 21: 
            { return Symbols.OP_LESS_THAN;
            }
          case 76: break;
          case 22: 
            { return Symbols.OP_GREATER_THAN;
            }
          case 77: break;
          case 23: 
            { return Symbols.OP_PLUS;
            }
          case 78: break;
          case 24: 
            { return Symbols.OP_MINUS;
            }
          case 79: break;
          case 25: 
            { return Symbols.OP_REMAINDER;
            }
          case 80: break;
          case 26: 
            { return Symbols.OP_CONDITIONAL;
            }
          case 81: break;
          case 27: 
            { return Symbols.OP_CONCAT;
            }
          case 82: break;
          case 28: 
            { return Symbols.IDENTIFIER;
            }
          case 83: break;
          case 29: 
            { return Symbols.LINE_COMMENT;
            }
          case 84: break;
          case 30: 
            { return Symbols.BLOCK_COMMENT;
            }
          case 85: break;
          case 31: 
            { return Symbols.OP_EQUAL;
            }
          case 86: break;
          case 32: 
            { return Symbols.OP_LESS_THAN_OR_EQUAL;
            }
          case 87: break;
          case 33: 
            { return Symbols.OP_SHIFT_LEFT;
            }
          case 88: break;
          case 34: 
            { return Symbols.OP_GREATER_THAN_OR_EQUAL;
            }
          case 89: break;
          case 35: 
            { return Symbols.OP_SHIFT_RIGHT;
            }
          case 90: break;
          case 36: 
            { return Symbols.OP_NOT_EQUAL;
            }
          case 91: break;
          case 37: 
            { return Symbols.KW_DO;
            }
          case 92: break;
          case 38: 
            { return Symbols.KW_IN;
            }
          case 93: break;
          case 39: 
            { return Symbols.KW_IF;
            }
          case 94: break;
          case 40: 
            { return Symbols.VECTOR_LITERAL;
            }
          case 95: break;
          case 41: 
            { return Symbols.KW_OUT;
            }
          case 96: break;
          case 42: 
            { return Symbols.KW_BIT;
            }
          case 97: break;
          case 43: 
            { return Symbols.KW_ELSE;
            }
          case 98: break;
          case 44: 
            { return Symbols.KW_TEXT;
            }
          case 99: break;
          case 45: 
            { return Symbols.KW_CASE;
            }
          case 100: break;
          case 46: 
            { return Symbols.KW_MODULE;
            }
          case 101: break;
          case 47: 
            { return Symbols.KW_MATRIX;
            }
          case 102: break;
          case 48: 
            { return Symbols.KW_SIGNAL;
            }
          case 103: break;
          case 49: 
            { return Symbols.KW_SWITCH;
            }
          case 104: break;
          case 50: 
            { return Symbols.KW_VECTOR;
            }
          case 105: break;
          case 51: 
            { return Symbols.KW_DEFAULT;
            }
          case 106: break;
          case 52: 
            { return Symbols.KW_INTEGER;
            }
          case 107: break;
          case 53: 
            { return Symbols.KW_REGISTER;
            }
          case 108: break;
          case 54: 
            { return Symbols.KW_CONSTANT;
            }
          case 109: break;
          case 55: 
            { return Symbols.KW_INTERFACE;
            }
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
